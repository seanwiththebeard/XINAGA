# https://github.com/sehugg/8bitworkshop/issues/186
# https://github.com/seanwiththebeard/8bitworkshop_MMC3_siegegame

SYMBOLS {
    __STACKSIZE__: type = weak, value = $0500; # 5 pages stack
}
MEMORY {
    ZP:     file = "", start = $0002, size = $00FE, type = rw, define = yes;

    # INES Cartridge Header
    HEADER: file = %O, start = $0000, size = $0010, fill = yes;

    #ROM Banks @ $8000
    PRGA_0: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_1: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_2: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_3: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_4: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_5: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_6: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_7: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_8: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_9: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_10: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_11: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_12: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_13: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_14: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_15: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_16: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_17: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_18: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_19: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_20: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_21: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_22: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_23: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_24: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGA_25: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    

    #ROM Banks @ $a000
    PRGB_0: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_1: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_2: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGB_3: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;    

    # fixed 16K ROM banks @ $c000
    PRG_FIXED: start = $C000, size = $2000, file = %O ,fill = yes, define = yes;
    # final bank has 
    # - startup
    # - code
    # - vectors
    PRG_LAST:    file = %O, start = $E000, size = $1FFA, fill = yes, define = yes;
    VECTORS: file = %O, start = $FFFA, size = $0006, fill = yes;

    # 32 8k CHR Banks (256k)
    #CHR:   file = %O, start = $0000, size = $40000, fill = yes;

    # standard 2k SRAM (-zeropage)
    # $0100-$0200 cpu stack
    # $0200-$0500 3 pages for ppu memory write buffer
    # $0500-$0800 3 pages for cc65 parameter stack
    RAM:   file = "", start = $0300, size = __STACKSIZE__, define = yes;

    # additional 8K SRAM Bank
    # - data (run)
    # - bss
    # - heap
    SRAM:    file = "", start = $6000, size = $2000, define = yes;
}
SEGMENTS {
    ZEROPAGE: load = ZP,              type = zp;
    HEADER:   load = HEADER,          type = ro;
    
    MAP:    load = PRGA_0,            type = ro,  define   = yes, optional = yes;
    COMBAT:    load = PRGA_1,            type = ro,  define   = yes, optional = yes;
    SCENARIO:    load = PRGA_2,            type = ro,  define   = yes, optional = yes;
    TITLE:    load = PRGA_3,            type = ro,  define   = yes, optional = yes;
    ADDCHAR:    load = PRGA_4,            type = ro,  define   = yes, optional = yes;
    MAPGEN:    load = PRGA_5,            type = ro,  define   = yes, optional = yes;
    CODEA_6:    load = PRGA_6,            type = ro,  define   = yes, optional = yes;
    CODEA_7:    load = PRGA_7,            type = ro,  define   = yes, optional = yes;
    CODEA_8:    load = PRGA_8,            type = ro,  define   = yes, optional = yes;
    CODEA_9:    load = PRGA_9,            type = ro,  define   = yes, optional = yes;
    CODEA_10:    load = PRGA_10,            type = ro,  define   = yes, optional = yes;
    CODEA_11:    load = PRGA_11,            type = ro,  define   = yes, optional = yes;
    CODEA_12:    load = PRGA_12,            type = ro,  define   = yes, optional = yes;
    CODEA_13:    load = PRGA_13,            type = ro,  define   = yes, optional = yes;
    CODEA_14:    load = PRGA_14,            type = ro,  define   = yes, optional = yes;
    CODEA_15:    load = PRGA_15,            type = ro,  define   = yes, optional = yes;
    CODEA_16:    load = PRGA_16,            type = ro,  define   = yes, optional = yes;
    CODEA_17:    load = PRGA_17,            type = ro,  define   = yes, optional = yes;
    CODEA_18:    load = PRGA_18,            type = ro,  define   = yes, optional = yes;
    CODEA_19:    load = PRGA_19,            type = ro,  define   = yes, optional = yes;
    CODEA_20:    load = PRGA_20,            type = ro,  define   = yes, optional = yes;
    CODEA_21:    load = PRGA_21,            type = ro,  define   = yes, optional = yes;
    CODEA_22:    load = PRGA_22,            type = ro,  define   = yes, optional = yes;
    CODEA_23:    load = PRGA_23,            type = ro,  define   = yes, optional = yes;
    CODEA_24:    load = PRGA_23,            type = ro,  define   = yes, optional = yes;
    CODEA_25:    load = PRGA_23,            type = ro,  define   = yes, optional = yes;
    
    
    CODEB_0:    load = PRGB_0,            type = ro,  define   = yes, optional = yes;
    CODEB_1:    load = PRGB_1,            type = ro,  define   = yes, optional = yes;
    CODEB_2:    load = PRGB_2,            type = ro,  define   = yes, optional = yes;
    CODEB_3:    load = PRGB_3,            type = ro,  define   = yes, optional = yes;
    
    GAME:    load = PRG_FIXED,            type = ro,  define   = yes, optional = yes;
    XINAGA:    load = PRG_FIXED,            type = ro,  define   = yes, optional = yes;
    XINAGA_GRAPHICS:    load = PRG_FIXED,            type = ro,  define   = yes, optional = yes;
    XINAGA_INPUT:    load = PRG_FIXED,            type = ro,  define   = yes, optional = yes;
    XINAGA_AUDIO:    load = PRG_FIXED,            type = ro,  define   = yes, optional = yes;
    XINAGA_FILEIO:    load = PRG_FIXED,            type = ro,  define   = yes, optional = yes;
    XINAGA_CONSOLE:    load = PRG_FIXED,            type = ro,  define   = yes, optional = yes;
    
    STARTUP:  load = PRG_LAST,            type = ro,  define   = yes;
    CODE:     load = PRG_LAST,            type = ro,  define   = yes;
    
    RODATA:   load = PRG_LAST,            type = ro,  define   = yes;
    ONCE:     load = PRG_LAST,            type = ro,  optional = yes;
    DATA:     load = PRG_LAST, run = RAM, type = rw,  define   = yes;
    
    
    BSS:      load = SRAM,            type = bss, define   = yes;
    XRAM:     load = SRAM, run = SRAM, type = rw,  define   = yes, optional = yes;
    SAVEGAME:     load = SRAM, run = SRAM, type = rw,  define   = yes, optional = yes;
    VECTORS:  load = VECTORS,         type = ro;
    #CHARS:    load = CHR,             type = ro;
    
    
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
